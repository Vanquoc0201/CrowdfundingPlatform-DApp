{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-355df32ff4cc3fc945e997ad5a402fa958ddc847",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/CampaignFactory.sol": "project/contracts/CampaignFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/Campaign.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ncontract Campaign is ReentrancyGuard {\r\n    struct Request {\r\n        string description;\r\n        uint256 amount;\r\n        address payable recipient;\r\n        uint256 approvalCount;\r\n        bool complete;\r\n        mapping(address => bool) approvals;\r\n    }\r\n    event Contributed(address indexed from, uint256 value);\r\n    event Refunded(address indexed to, uint256 value);\r\n    event RequestCreated(uint256 indexed id, string description, uint256 amount, address recipient);\r\n    event Approved(uint256 indexed id, address indexed voter, uint256 weight);\r\n    event Finalized(uint256 indexed id);\r\n\r\n    address public immutable owner;\r\n    string public title;\r\n    string public metaDataURI;\r\n    uint256 public goalWei;\r\n    uint64 public deadlineTs;\r\n    uint256 public totalRaised;\r\n    uint256 public contributorCount;\r\n    uint256 public minimumContribution; \r\n\r\n    mapping(address => uint256) public contributions;\r\n    Request[] public requests; \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _owner,\r\n        string memory _title,\r\n        uint256 _goalWei,\r\n        uint64 _deadlineTs,\r\n        string memory _metaDataURI,\r\n        uint256 _minimumContribution \r\n    ) {\r\n        owner = _owner;\r\n        title = _title;\r\n        goalWei = _goalWei;\r\n        deadlineTs = _deadlineTs;\r\n        metaDataURI = _metaDataURI;\r\n        minimumContribution = _minimumContribution; \r\n        require(_minimumContribution > 0, \"Minimum contribution must be greater than 0\"); \r\n    }\r\n\r\n    function contribute() external payable {\r\n        require(block.timestamp < deadlineTs, \"Campaign has ended\");\r\n        require(msg.value >= minimumContribution, \"Contribution must be at least minimumContribution\"); \r\n        if (contributions[msg.sender] == 0) {\r\n            contributorCount++;\r\n        }\r\n        contributions[msg.sender] += msg.value;\r\n        totalRaised += msg.value;\r\n        emit Contributed(msg.sender, msg.value);\r\n    }\r\n\r\n    function goalMet() public view returns (bool) {\r\n        return totalRaised >= goalWei;\r\n    }\r\n\r\n    function isEnded() public view returns (bool) {\r\n        return block.timestamp >= deadlineTs;\r\n    }\r\n\r\n    function refund() external nonReentrant {\r\n        require(isEnded(), \"Campaign is still ongoing\");\r\n        require(!goalMet(), \"Campaign goal was met\");\r\n        uint256 bal = contributions[msg.sender];\r\n        require(bal > 0, \"No contributions to refund\");\r\n        contributions[msg.sender] = 0;\r\n        (bool success, ) = payable(msg.sender).call{value: bal}(\"\");\r\n        require(success, \"Refund transfer failed\");\r\n        emit Refunded(msg.sender, bal);\r\n    }\r\n\r\n    function createRequest(string memory _description, uint256 _amount, address payable _recipient) external onlyOwner() {\r\n        require(isEnded() && goalMet(), \"Campaign must be successful and ended to create requests\");\r\n        require(_amount > 0, \"Request amount must be greater than 0\");\r\n        require(_amount <= address(this).balance, \"Request amount exceeds contract balance\"); \r\n        requests.push();\r\n        uint256 id = requests.length - 1;\r\n        Request storage r = requests[id];\r\n        r.description = _description;\r\n        r.amount = _amount;\r\n        r.recipient = _recipient;\r\n        emit RequestCreated(id, _description, _amount, _recipient);\r\n    }\r\n\r\n    function approveRequest(uint256 _id) external {\r\n        require(_id < requests.length, \"Invalid request ID\");\r\n        Request storage r = requests[_id];\r\n        require(contributions[msg.sender] > 0, \"Only contributors can approve\");\r\n        require(!r.approvals[msg.sender], \"You have already approved this request\");\r\n        require(!r.complete, \"Request has already been finalized\");\r\n        require(isEnded() && goalMet(), \"Campaign must be successful and ended to approve requests\");\r\n        r.approvals[msg.sender] = true;\r\n        uint256 weight = contributions[msg.sender]; \r\n        unchecked {\r\n            r.approvalCount += weight;\r\n        }\r\n        emit Approved(_id, msg.sender, weight);\r\n    }\r\n\r\n    function finalizeRequest(uint256 _id) external nonReentrant onlyOwner() {\r\n        require(_id < requests.length, \"Invalid request ID\");\r\n        require(isEnded() && goalMet(), \"Campaign must be successful and ended to finalize requests\");\r\n        Request storage r = requests[_id];\r\n        require(!r.complete, \"Request has already been finalized\");\r\n        require(r.amount <= address(this).balance, \"Not enough balance to finalize this request\");\r\n        require(r.approvalCount > (totalRaised / 2), \"Not enough approvals to finalize this request\");\r\n\r\n        r.complete = true;\r\n        (bool success, ) = r.recipient.call{value: r.amount}(\"\");\r\n        require(success, \"Transfer to recipient failed\");\r\n        emit Finalized(_id);\r\n    }\r\n\r\n    function getSummary() external view returns (address _owner, string memory _title, uint256 _goalWei, uint64 _deadlineTs, string memory _metaDataURI, uint256 _totalRaised, uint256 _contributorCount, uint256 _requestCount, uint256 _minimumContribution) {\r\n        return (owner, title, goalWei, deadlineTs, metaDataURI, totalRaised, contributorCount, requests.length, minimumContribution);\r\n    }\r\n\r\n    function getRequest(uint256 _id) external view returns (string memory description, uint256 amount, address recipient, uint256 approvalCount, bool complete) {\r\n        require(_id < requests.length, \"Invalid request ID\");\r\n        Request storage r = requests[_id];\r\n        return (r.description, r.amount, r.recipient, r.approvalCount, r.complete);\r\n    }\r\n\r\n    function hasApproved(uint256 _id, address _approver) external view returns (bool) {\r\n        require(_id < requests.length, \"Invalid request ID\");\r\n        return requests[_id].approvals[_approver];\r\n    }\r\n}"
      },
      "project/contracts/CampaignFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"./Campaign.sol\"; \r\n\r\ncontract CampaignFactory {\r\n    event CampaignCreated(address indexed owner, address campaign, string title, uint256 goal, uint256 deadline, string metaDataURI);\r\n\r\n    address[] public campaigns;\r\n    function createCampaign(\r\n        string memory _title,\r\n        uint256 _goalWei,\r\n        uint64 _deadlineTs,\r\n        string memory _metaDataURI,\r\n        uint256 _minimumContribution \r\n    ) external returns (address addr) {\r\n        require(_goalWei > 0, \"Goal must be greater than 0\");\r\n        require(_deadlineTs > block.timestamp, \"Deadline must be in the future\");\r\n        Campaign c = new Campaign(msg.sender, _title, _goalWei, _deadlineTs, _metaDataURI, _minimumContribution);\r\n        addr = address(c);\r\n        campaigns.push(addr);\r\n        emit CampaignCreated(msg.sender, addr, _title, _goalWei, _deadlineTs, _metaDataURI);\r\n    }\r\n\r\n    function getCampaigns() external view returns (address[] memory) {\r\n        return campaigns;\r\n    }\r\n}"
      }
    }
  }
}